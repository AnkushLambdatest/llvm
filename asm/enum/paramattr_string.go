// Code generated by "string2enum -linecomment -type ParamAttr ../../ir/enum"; DO NOT EDIT.

package enum

import "fmt"
import "github.com/llir/llvm/ir/enum"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the string2enum command to generate them again.
	var x [1]struct{}
	_ = x[enum.ParamAttrInAlloca-0]
	_ = x[enum.ParamAttrInReg-1]
	_ = x[enum.ParamAttrNest-2]
	_ = x[enum.ParamAttrNoAlias-3]
	_ = x[enum.ParamAttrNoCapture-4]
	_ = x[enum.ParamAttrNonNull-5]
	_ = x[enum.ParamAttrReadNone-6]
	_ = x[enum.ParamAttrReadOnly-7]
	_ = x[enum.ParamAttrReturned-8]
	_ = x[enum.ParamAttrSignExt-9]
	_ = x[enum.ParamAttrSRet-10]
	_ = x[enum.ParamAttrSwiftError-11]
	_ = x[enum.ParamAttrSwiftSelf-12]
	_ = x[enum.ParamAttrWriteOnly-13]
	_ = x[enum.ParamAttrZeroExt-14]
}

const _ParamAttr_name = "inallocainregnestnoaliasnocapturenonnullreadnonereadonlyreturnedsignextsretswifterrorswiftselfwriteonlyzeroext"

var _ParamAttr_index = [...]uint8{0, 8, 13, 17, 24, 33, 40, 48, 56, 64, 71, 75, 85, 94, 103, 110}

func ParamAttrFromString(s string) enum.ParamAttr {
	if len(s) == 0 {
		return 0
	}
	for i := range _ParamAttr_index[:len(_ParamAttr_index)-1] {
		if s == _ParamAttr_name[_ParamAttr_index[i]:_ParamAttr_index[i+1]] {
			return enum.ParamAttr(i)
		}
	}
	panic(fmt.Errorf("unable to locate ParamAttr enum corresponding to %q", s))
}
