// Code generated by "string2enum -linecomment -type FuncAttr ../../ir/enum"; DO NOT EDIT.

package enum

import (
	"fmt"

	"github.com/llir/llvm/ir/enum"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the string2enum command to generate them again.
	var x [1]struct{}
	_ = x[enum.FuncAttrAlwaysInline-0]
	_ = x[enum.FuncAttrArgMemOnly-1]
	_ = x[enum.FuncAttrBuiltin-2]
	_ = x[enum.FuncAttrCold-3]
	_ = x[enum.FuncAttrConvergent-4]
	_ = x[enum.FuncAttrInaccessibleMemOrArgMemOnly-5]
	_ = x[enum.FuncAttrInaccessibleMemOnly-6]
	_ = x[enum.FuncAttrInlineHint-7]
	_ = x[enum.FuncAttrJumpTable-8]
	_ = x[enum.FuncAttrMinSize-9]
	_ = x[enum.FuncAttrNaked-10]
	_ = x[enum.FuncAttrNoBuiltin-11]
	_ = x[enum.FuncAttrNoCFCheck-12]
	_ = x[enum.FuncAttrNoDuplicate-13]
	_ = x[enum.FuncAttrNoFree-14]
	_ = x[enum.FuncAttrNoImplicitFloat-15]
	_ = x[enum.FuncAttrNoInline-16]
	_ = x[enum.FuncAttrNonLazyBind-17]
	_ = x[enum.FuncAttrNoRecurse-18]
	_ = x[enum.FuncAttrNoRedZone-19]
	_ = x[enum.FuncAttrNoReturn-20]
	_ = x[enum.FuncAttrNoSync-21]
	_ = x[enum.FuncAttrNoUnwind-22]
	_ = x[enum.FuncAttrOptForFuzzing-23]
	_ = x[enum.FuncAttrOptNone-24]
	_ = x[enum.FuncAttrOptSize-25]
	_ = x[enum.FuncAttrReadNone-26]
	_ = x[enum.FuncAttrReadOnly-27]
	_ = x[enum.FuncAttrReturnsTwice-28]
	_ = x[enum.FuncAttrSafeStack-29]
	_ = x[enum.FuncAttrSanitizeAddress-30]
	_ = x[enum.FuncAttrSanitizeHWAddress-31]
	_ = x[enum.FuncAttrSanitizeMemory-32]
	_ = x[enum.FuncAttrSanitizeMemTag-33]
	_ = x[enum.FuncAttrSanitizeThread-34]
	_ = x[enum.FuncAttrShadowCallStack-35]
	_ = x[enum.FuncAttrSpeculatable-36]
	_ = x[enum.FuncAttrSpeculativeLoadHardening-37]
	_ = x[enum.FuncAttrSSP-38]
	_ = x[enum.FuncAttrSSPReq-39]
	_ = x[enum.FuncAttrSSPStrong-40]
	_ = x[enum.FuncAttrStrictFP-41]
	_ = x[enum.FuncAttrUwtable-42]
	_ = x[enum.FuncAttrWillReturn-43]
	_ = x[enum.FuncAttrWriteOnly-44]
}

const _FuncAttr_name = "alwaysinlineargmemonlybuiltincoldconvergentinaccessiblemem_or_argmemonlyinaccessiblememonlyinlinehintjumptableminsizenakednobuiltinnocf_checknoduplicatenofreenoimplicitfloatnoinlinenonlazybindnorecursenoredzonenoreturnnosyncnounwindoptforfuzzingoptnoneoptsizereadnonereadonlyreturns_twicesafestacksanitize_addresssanitize_hwaddresssanitize_memorysanitize_memtagsanitize_threadshadowcallstackspeculatablespeculative_load_hardeningsspsspreqsspstrongstrictfpuwtablewillreturnwriteonly"

var _FuncAttr_index = [...]uint16{0, 12, 22, 29, 33, 43, 72, 91, 101, 110, 117, 122, 131, 141, 152, 158, 173, 181, 192, 201, 210, 218, 224, 232, 245, 252, 259, 267, 275, 288, 297, 313, 331, 346, 361, 376, 391, 403, 429, 432, 438, 447, 455, 462, 472, 481}

// FuncAttrFromString returns the FuncAttr enum corresponding to s.
func FuncAttrFromString(s string) enum.FuncAttr {
	if len(s) == 0 {
		return 0
	}
	for i := range _FuncAttr_index[:len(_FuncAttr_index)-1] {
		if s == _FuncAttr_name[_FuncAttr_index[i]:_FuncAttr_index[i+1]] {
			return enum.FuncAttr(i)
		}
	}
	panic(fmt.Errorf("unable to locate FuncAttr enum corresponding to %q", s))
}
